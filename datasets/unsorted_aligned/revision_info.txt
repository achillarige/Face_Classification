arguments: facenets/src/align/align_dataset_mtcnn.py datasets/unsorted_unaligned/ datasets/unsorted_aligned/
--------------------
git hash: b'4faf590600f122c3cd2ab3ab3c85bd3bd2d00822'
--------------------
b'diff --git a/src/align/align_dataset_mtcnn.py b/src/align/align_dataset_mtcnn.py\nindex d2a3eea..9c547be 100644\n--- a/src/align/align_dataset_mtcnn.py\n+++ b/src/align/align_dataset_mtcnn.py\n@@ -25,8 +25,10 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n-from scipy import misc\n import sys\n+sys.path.append("..")\n+\n+from scipy import misc\n import os\n import argparse\n import tensorflow as tf\n@@ -137,6 +139,7 @@ def parse_arguments(argv):\n         help=\'Shuffles the order of images to enable alignment using multiple processes.\', action=\'store_true\')\n     parser.add_argument(\'--gpu_memory_fraction\', type=float,\n         help=\'Upper bound on the amount of GPU memory that will be used by the process.\', default=1.0)\n+    print(parser.parse_args(argv))\n     return parser.parse_args(argv)\n \n if __name__ == \'__main__\':\ndiff --git a/src/classifier.py b/src/classifier.py\nindex 749db4d..75f2959 100644\n--- a/src/classifier.py\n+++ b/src/classifier.py\n@@ -26,14 +26,17 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n+import sys\n+sys.path.append("..")\n+\n import tensorflow as tf\n import numpy as np\n import argparse\n import facenet\n import os\n-import sys\n import math\n import pickle\n+from sklearn import neighbors\n from sklearn.svm import SVC\n \n def main(args):\n@@ -92,7 +95,8 @@ def main(args):\n             if (args.mode==\'TRAIN\'):\n                 # Train classifier\n                 print(\'Training classifier\')\n-                model = SVC(kernel=\'linear\', probability=True)\n+                #model = SVC(kernel=\'linear\', probability=True)\n+                model = neighbors.KNeighborsClassifier(n_neighbors=1)\n                 model.fit(emb_array, labels)\n             \n                 # Create a list of class names'